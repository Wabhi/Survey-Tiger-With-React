{"version":3,"sources":["survey.png","Components/Menu.js","Components/TypeSelector.js","Components/Questions.js","Components/Options.js","Components/CreateSurvey.js","Components/Published.js","App.js","reportWebVitals.js","index.js"],"names":["Menu","className","to","TypeSelector","qType","setQType","value","onChange","e","type","parseInt","target","Questions","onChangeText","id","style","marginRight","placeholder","Options","addOption","deleteOption","updateText","uid","marginLeft","onClick","CreateSurvey","squestion","setSquestion","history","useHistory","getRandom","Math","floor","random","defaultOptionsState","useState","qText","setQText","qOption","setQOption","newOption","updatedOption","push","length","alert","pop","text","changeText","findIndex","x","updateSurveyQuestion","updateSurveyQ","newQ","qtext","qtype","qoption","map","opt","key","Published","questions","q","App","alt","src","Logo","height","width","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f12a3cd4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/survey.3cc8e8ff.png\";","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\n const Menu = () => {\r\n    return (\r\n        <div className=\"my-3\">\r\n            <Link to=\"/create\">\r\n               <button className=\"btn btn-danger m-1\">Create Survey</button>\r\n            </Link>\r\n            <Link to=\"/publish\">\r\n               <button className=\"btn btn-danger m-1\">Take Survey</button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\nexport default Menu;","import React from 'react'\r\n\r\nconst TypeSelector = ({qType,setQType}) => {\r\n    return (\r\n        <>\r\n          <div className=\"col-md-6 offset-md-3 col-12\">\r\n                <select className=\"custom-select\" value={qType} onChange={e => { let type = parseInt(e.target.value);setQType(type)}}>\r\n                    <option value=\"0\">Choose Question Type</option>\r\n                    <option value=\"1\">Multi-Select</option>\r\n                    <option value=\"2\">Single-Select</option>\r\n                </select>\r\n            </div>    \r\n        </>\r\n    )\r\n}\r\n\r\nexport default TypeSelector\r\n","import React from 'react'\r\n\r\nconst Questions = ({onChangeText}) => {\r\n    return (\r\n        <>\r\n            <div className=\"col-md-8 offset-md-3 col-12 input-group my-3\">\r\n                <div className=\"input-group-prepend\">\r\n                  <span className=\"input-group-text\" id=\"basic-addon1\">?</span>\r\n                </div>\r\n                <input style={{ marginRight: \"170px\" }} type=\"text\" className=\"form-control\" placeholder=\"Question\" onChange={e=>onChangeText(e.target.value)}/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Questions\r\n","import React from 'react'\r\n\r\nconst Options = ({addOption,deleteOption,updateText,uid}) => {\r\n    return (\r\n        <>\r\n            <div className=\"col-md-8 offset-md-2 col-12 input-group my-3\">\r\n                <input className=\"form-control\" type=\"text\" placeholder=\"Option Text\" style={{ marginLeft: \"80px\" }} onChange={(e)=>updateText(uid,e.target.value) }/>\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={()=>addOption()}>+</button>\r\n                    <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={()=>deleteOption()}>-</button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Options\r\n","import React, { useState } from 'react'\r\nimport TypeSelector from './TypeSelector'\r\nimport Questions from './Questions'\r\nimport Options from './Options'\r\nimport {useHistory} from 'react-router'\r\nconst CreateSurvey = ({ squestion, setSquestion }) => {\r\n    \r\n    const history = useHistory()\r\n    const getRandom = () => { return Math.floor((Math.random() * 1000) + 1) }\r\n    const defaultOptionsState = [{ uid: getRandom(), value: \"\" }, { uid: getRandom(), value: \"\" }]\r\n    const [qText, setQText] = useState('')\r\n    const [qType, setQType] = useState(0)\r\n    const [qOption, setQOption] = useState(defaultOptionsState)\r\n\r\n    const addOption = () => {\r\n        //alert(\"+ clicked!\")\r\n        let newOption = {\r\n            uid: getRandom(),\r\n            value: ''\r\n        }\r\n        let updatedOption = [...qOption]\r\n        updatedOption.push(newOption)\r\n        setQOption(updatedOption)\r\n    }\r\n    const deleteOption = () => {\r\n        if (qOption.length === 2) {\r\n            alert('selected question type should have atleast two options!')\r\n        } else {\r\n            let updatedOption = [...qOption]\r\n            updatedOption.pop();\r\n            setQOption(updatedOption)\r\n        }\r\n        \r\n    }\r\n    const updateText = (id,text) => {\r\n        let updatedOption = [...qOption]\r\n        let changeText = updatedOption.findIndex((x => x.uid === id))\r\n        updatedOption[changeText].value = text\r\n        setQOption(updatedOption)\r\n    }\r\n    const updateSurveyQuestion = () => {\r\n        let updateSurveyQ = [...squestion]\r\n        let newQ = {\r\n            qtext: qText,\r\n            qtype: qType,\r\n            qoption:qOption\r\n        }\r\n        updateSurveyQ.push(newQ)\r\n        setSquestion(updateSurveyQ)\r\n        setQType(0)\r\n        setQText('')\r\n        setQOption(defaultOptionsState)\r\n    }\r\n    const publishSurveyQuestion = () => {\r\n        updateSurveyQuestion()\r\n        history.push('/publish')\r\n        //alert('published!')\r\n    }\r\n    return (\r\n        <>\r\n            <TypeSelector qType={qType} setQType={setQType} />\r\n            {qType !== 0 ?\r\n                <>\r\n                    <Questions onChangeText={setQText}/>\r\n                    {qOption.map((opt, key) => (\r\n                        <Options key={key} uid={opt.uid} addOption={addOption} deleteOption={deleteOption} updateText={updateText}/>\r\n                    ))}\r\n                    <button className=\"btn btn-primary m-1 my-3\" onClick={()=>updateSurveyQuestion()}>Add Question</button>\r\n                    <button className=\"btn btn-primary m-1\" onClick={()=>publishSurveyQuestion()}>Publish</button>\r\n                </>\r\n                : null}\r\n            \r\n            \r\n        </>\r\n    )\r\n}\r\nexport default CreateSurvey;","import React from 'react'\r\nconst Published = ({questions}) => {\r\n    return (\r\n        <>\r\n            {/* {questions.length > 0 ?\r\n                questions.map((q, key) => (\r\n                    <div key={key}>\r\n                        <h3 className=\"my-3\">{q.qtext}</h3>\r\n                        {q.qoption.map((opt) => (\r\n                            q.qtype===1?(\"multi\"):(\"not multi\")\r\n                        ))}\r\n                    </div>\r\n                ))\r\n                : <div className=\"text-center\">\r\n                    <h3>No Questions Added !</h3>\r\n                </div>} */}\r\n            <div className=\"mt-5 text-left\">\r\n                {questions.length > 0 ? questions.map((q, key) => (\r\n                    <div key={key}>\r\n                        <h3 className=\"my-3\">{q.qtext}</h3>\r\n                        {q.qoption.map((opt) => (\r\n                            q.qtype === 1 ?\r\n                                <div className=\"form-check\" key={opt.uid}>\r\n                                    <label className=\"form-check-label\">\r\n                                        <input type=\"checkbox\" className=\"form-check-input\" value=\"\" />{opt.value}\r\n                                    </label>\r\n                                </div>\r\n                            :<div className=\"form-check\" key={opt.uid}>\r\n                            <label className=\"form-check-label\">\r\n                                <input type=\"radio\" className=\"form-check-input\" value=\"\" />{opt.value}\r\n                            </label>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                ))\r\n                    :\r\n                    <div className=\"text-center\">\r\n                        <h2>No Question Added !</h2>\r\n                    </div>\r\n                }\r\n                {questions.length!==0 ?  <div className=\"text-right\">\r\n                           <button className=\"btn btn-primary\">Confirm</button>\r\n                        </div> :null}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Published;","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Logo from './survey.png'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Menu from \"./Components/Menu\"\nimport CreateSurvey from \"./Components/CreateSurvey\"\nimport Published from \"./Components/Published\"\nimport { useState } from 'react';\nimport {Link} from 'react-router-dom'\n\nfunction App() {\n  const [squestion,setSquestion] = useState([])\n  return (\n    <>\n      <div className=\"col-md-10 offset-md-1 col-12 text-center\">\n        <Router>\n          <Link to=\"/\">\n             <img className=\"col-md-6\" alt=\"logo\" src={Logo} height=\"100px\" width=\"400px\" />\n          </Link>\n          <Switch>\n            <Route path=\"/\" component={Menu}  exact/>\n            <Route path=\"/create\" >\n              <CreateSurvey squestion={squestion} setSquestion={setSquestion}/>\n            </Route>\n            <Route path=\"/publish\">\n              <Published questions={squestion}/>\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}